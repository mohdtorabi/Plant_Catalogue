[{"/Users/torabi97/Desktop/post-bootcamp/plant_catalogue/client/src/index.js":"1","/Users/torabi97/Desktop/post-bootcamp/plant_catalogue/client/src/App.js":"2","/Users/torabi97/Desktop/post-bootcamp/plant_catalogue/client/src/components/CreatePlant.js":"3","/Users/torabi97/Desktop/post-bootcamp/plant_catalogue/client/src/components/ListPlants.js":"4","/Users/torabi97/Desktop/post-bootcamp/plant_catalogue/client/src/components/EditPlant.js":"5"},{"size":221,"mtime":1617141857664,"results":"6","hashOfConfig":"7"},{"size":299,"mtime":1617170693418,"results":"8","hashOfConfig":"7"},{"size":3220,"mtime":1617392125594,"results":"9","hashOfConfig":"7"},{"size":3116,"mtime":1617392117645,"results":"10","hashOfConfig":"7"},{"size":4619,"mtime":1617392130728,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"1jo7hmg",{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},"/Users/torabi97/Desktop/post-bootcamp/plant_catalogue/client/src/index.js",[],["26","27"],"/Users/torabi97/Desktop/post-bootcamp/plant_catalogue/client/src/App.js",[],"/Users/torabi97/Desktop/post-bootcamp/plant_catalogue/client/src/components/CreatePlant.js",["28","29"],"import React, { useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from '@material-ui/core/Button';\nimport axios from \"axios\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    '& .MuiTextField-root': {\n      margin: theme.spacing(1),\n      width: 200,\n    },\n  },\n}));\n\n\nconst CreatePlant = () => {\n  const classes = useStyles();\n  const [plantDetail, setPlantDetail] = useState({\n    name: \"\",\n    description: \"\",\n    family: \"\",\n    kingdom: \"\",\n    species: \"\",\n  })\n\n  const onSubmitForm = async (e) => {\n    e.preventDefault()\n    try {\n      const body = {\n        name: plantDetail.name, \n        description: plantDetail.description, \n        family: plantDetail.family,\n        kingdom: plantDetail.kingdom,\n        species: plantDetail.species,\n      };\n      const response = await axios(\"http://localhost:5000/plants\", {\n        method: \"POST\",\n        url: '/',\n        headers: {\"Content-Type\": \"application/json\"},\n        data: JSON.stringify(body)\n      });\n      window.location = \"/\"\n    } catch {\n      console.log(\"errorrr\");\n    }\n  }\n\n  return (\n    <div>\n      <h1>Create a Plant Porfolio</h1>\n      <form className={classes.root} noValidate autoComplete=\"off\" onSubmit={onSubmitForm}>\n      <TextField\n          id=\"standard-error-helper-text\"\n          label=\"Plant Name\"\n          type=\"text\"\n          value={plantDetail.name}\n          onChange={e => setPlantDetail((prev) => ({\n            ...prev,\n            name: e.target.value,\n          }))}\n        />\n        <TextField\n          id=\"standard-error-helper-text\"\n          label=\"Plant Description\"\n          type=\"text\"\n          value={plantDetail.description}\n          onChange={e => setPlantDetail((prev) => ({\n            ...prev,\n            description: e.target.value,\n          }))}\n        />\n        <TextField\n          id=\"standard-error-helper-text\"\n          label=\"Plant Family\"\n          type=\"text\"\n          value={plantDetail.family}\n          onChange={e => setPlantDetail((prev) => ({\n            ...prev,\n            family: e.target.value,\n          }))}\n        />\n        <TextField\n          id=\"standard-error-helper-text\"\n          label=\"Plant Kingdom\"\n          type=\"url\"\n          value={plantDetail.kingdom}\n          onChange={e => setPlantDetail((prev) => ({\n            ...prev,\n            kingdom: e.target.value,\n          }))}\n        />\n        <TextField\n          id=\"standard-error-helper-text\"\n          label=\"Plant Species\"\n          type=\"url\"\n          value={plantDetail.species}\n          onChange={e => setPlantDetail((prev) => ({\n            ...prev,\n            species: e.target.value,\n          }))}\n        />\n        <button style={{direction:\"flex\", justifyContent:\"flex-end\",marginTop:\"20px\",fontSize:\"0.875em\", color: \"white\", backgroundColor:\"#3f51b5\", boxShadow:\"0px 3px 1px -2px rgb(0 0 0 / 20%), 0px 2px 2px 0px rgb(0 0 0 / 14%), 0px 1px 5px 0px rgb(0 0 0 / 12%)\", padding:\"6px 16px\", borderRadius:\"4px\", boxSizing:\"border-box\", cursor:\"pointer\" }}>\n          Create Plant\n        </button>\n      </form>\n      \n    </div>\n  );\n};\n\nexport default CreatePlant;\n","/Users/torabi97/Desktop/post-bootcamp/plant_catalogue/client/src/components/ListPlants.js",["30","31"],"import React, {Fragment, useEffect, useState} from \"react\";\nimport { useHistory, Link } from \"react-router-dom\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport axios from \"axios\";\nimport EditPlant from \"./EditPlant\";\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles({\n  table: {\n    minWidth: 650,\n  },\n});\n\nconst ListPlants = () => {\n  const classes = useStyles();\n  const [plants, setPlants] = useState([])\n\n\n  const getPlants = async () => {\n    return await axios(\"http://localhost:5000/plants\")\n      .then((res) => {\n        setPlants(res.data)\n      })\n      .catch((e) => {\n        console.log(\"error listing plants\", e);\n      })\n  }\n\n  const deletePlant = async (id) => {\n    return await axios(`http://localhost:5000/plants/${id}`, {\n      method: \"DELETE\"\n    })\n      .then((plantDeleted) => {\n        setPlants(plants.filter(plant => plant.plant_id !== id))\n      })\n      .catch((e) => {\n        console.log(\"error listing plants\", e);\n      })\n  }\n\n  const history = useHistory();\n\n  \n\n  useEffect(() => {\n    getPlants()\n  },[])\n\n\n  return (\n    <Fragment>\n      <h1>Plant Catalogue</h1>\n      <TableContainer component={Paper}>\n      <Table className={classes.table} aria-label=\"simple table\">\n        <TableHead>\n          <TableRow>\n            <TableCell>ID</TableCell>\n            <TableCell align=\"center\">Name</TableCell>\n            <TableCell align=\"center\">Description</TableCell>\n            <TableCell align=\"center\">Family</TableCell>\n            <TableCell align=\"center\">Kingdom</TableCell>\n            <TableCell align=\"center\">Species</TableCell>\n            <TableCell align=\"Center\">Edit Plant</TableCell>\n            <TableCell align=\"Center\">Delete Plant</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {plants.map((plant) => (\n            <TableRow key={plant.plant_id}>\n              <TableCell component=\"th\" scope=\"row\">\n                {plant.plant_id}\n              </TableCell>\n              <TableCell align=\"center\">{plant.name}</TableCell>\n              <TableCell align=\"center\">{plant.description}</TableCell>\n              <TableCell align=\"center\">{plant.family}</TableCell>\n              <TableCell align=\"center\">{plant.kingdom}</TableCell>\n              <TableCell align=\"center\">{plant.species}</TableCell>\n              <TableCell align=\"center\"><EditPlant plant={plant}/></TableCell>\n              <TableCell align=\"center\"><Button onClick={()=> deletePlant(plant.plant_id)} variant=\"contained\" color=\"secondary\">\n              Delete\n      </Button></TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableContainer>\n    </Fragment>\n    \n  );\n}\n\n\nexport default ListPlants;","/Users/torabi97/Desktop/post-bootcamp/plant_catalogue/client/src/components/EditPlant.js",["32"],"import React, {useState} from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Modal from \"@material-ui/core/Modal\";\nimport Backdrop from \"@material-ui/core/Backdrop\";\nimport Fade from \"@material-ui/core/Fade\";\nimport TextField from \"@material-ui/core/TextField\";\nimport axios from \"axios\";\nimport Button from '@material-ui/core/Button';\n\nconst useStyles = makeStyles((theme) => ({\n  modal: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n  },\n  paper: {\n    backgroundColor: theme.palette.background.paper,\n    border: \"2px solid #000\",\n    boxShadow: theme.shadows[5],\n    padding: theme.spacing(2, 4, 3),\n  },\n}));\n\nexport default function EditPlant({plant}) {\n  const classes = useStyles();\n  const [open, setOpen] = useState(false);\n\n  const [plantDetail, setPlantDetail] = useState({\n    name: plant.name,\n    description: plant.description,\n    family: plant.family,\n    kingdom: plant.kingdom,\n    species: plant.species,\n  })\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const updatePlantDetail = async (e) => {\n    e.preventDefault()\n    try {\n      const body = {\n        name: plantDetail.name, \n        description: plantDetail.description, \n        family: plantDetail.family,\n        kingdom: plantDetail.kingdom,\n        species: plantDetail.species,\n      };\n      const response = await axios(`http://localhost:5000/plants/${plant.plant_id}`, {\n        method: \"PUT\",\n        url: '/',\n        headers: {\"Content-Type\": \"application/json\"},\n        data: JSON.stringify(body)\n      });\n      window.location = \"/\";\n    } catch {\n      console.log(\"errorrr\");\n    }\n  }\n\n  return (\n    <div>\n      <Button variant=\"contained\" color=\"primary\" type=\"button\" onClick={handleOpen}>\n        Edit\n      </Button>\n      <Modal\n        aria-labelledby=\"transition-modal-title\"\n        aria-describedby=\"transition-modal-description\"\n        className={classes.modal}\n        open={open}\n        onClose={handleClose}\n        closeAfterTransition\n        BackdropComponent={Backdrop}\n        BackdropProps={{\n          timeout: 500,\n        }}\n      >\n        <Fade in={open} style={{backgroundColor:\"white\", color:\"black\", padding:\"10px\"}}>\n          <div>\n            <h1>Edit Plant Porfolio</h1>\n            <form\n              className={classes.root}\n              noValidate\n              autoComplete=\"off\"\n            >\n              <TextField\n                id=\"standard-error-helper-text\"\n                label=\"Plant Name\"\n                type=\"text\"\n                value={plantDetail.name}\n                onChange={(e) =>\n                  setPlantDetail((prev) => ({\n                    ...prev,\n                    name: e.target.value,\n                  }))\n                }\n              />\n              <TextField\n                id=\"standard-error-helper-text\"\n                label=\"Plant Description\"\n                type=\"text\"\n                value={plantDetail.description}\n                onChange={(e) =>\n                  setPlantDetail((prev) => ({\n                    ...prev,\n                    description: e.target.value,\n                  }))\n                }\n              />\n              <TextField\n                id=\"standard-error-helper-text\"\n                label=\"Plant Family\"\n                type=\"url\"\n                value={plantDetail.family}\n                onChange={(e) =>\n                  setPlantDetail((prev) => ({\n                    ...prev,\n                    family: e.target.value,\n                  }))\n                }\n              />\n              <TextField\n                id=\"standard-error-helper-text\"\n                label=\"Plant Kingdom\"\n                type=\"url\"\n                value={plantDetail.kingdom}\n                onChange={(e) =>\n                  setPlantDetail((prev) => ({\n                    ...prev,\n                    kingdom: e.target.value,\n                  }))\n                }\n              />\n              <TextField\n                id=\"standard-error-helper-text\"\n                label=\"Plant Species\"\n                type=\"url\"\n                value={plantDetail.species}\n                onChange={(e) =>\n                  setPlantDetail((prev) => ({\n                    ...prev,\n                    species: e.target.value,\n                  }))\n                }\n              />\n              <Button variant=\"contained\" color=\"primary\" onClick={e => updatePlantDetail(e)}>Edit Plant</Button>\n            </form>\n          </div>\n        </Fade>\n      </Modal>\n    </div>\n  );\n}\n",{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","severity":1,"message":"38","line":4,"column":8,"nodeType":"39","messageId":"40","endLine":4,"endColumn":14},{"ruleId":"37","severity":1,"message":"41","line":37,"column":13,"nodeType":"39","messageId":"40","endLine":37,"endColumn":21},{"ruleId":"37","severity":1,"message":"42","line":2,"column":22,"nodeType":"39","messageId":"40","endLine":2,"endColumn":26},{"ruleId":"37","severity":1,"message":"43","line":48,"column":9,"nodeType":"39","messageId":"40","endLine":48,"endColumn":16},{"ruleId":"37","severity":1,"message":"41","line":54,"column":13,"nodeType":"39","messageId":"40","endLine":54,"endColumn":21},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-unused-vars","'Button' is defined but never used.","Identifier","unusedVar","'response' is assigned a value but never used.","'Link' is defined but never used.","'history' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]